From 8d8204c48660cfe67ce27c95ce029e2cfa302958 Mon Sep 17 00:00:00 2001
From: Suryanarayana Raju Sangani <ssangani@xilinx.com>
Date: Thu, 27 Feb 2020 05:13:38 -0700
Subject: [PATCH] PKTGEN-20.12.0: Patch to add Jumbo packet support

This patch include:
1. Jumbo frame support for Pktgen.
2. Increase default number of RX_DESC to 2K.
3. Disable RX classification.
4. Set user provided packet size as DMA packet size i.e. not to remove
CRC bytes

Signed-off-by: Kumar Sanghvi <kumars@xilinx.com>
Signed-off-by: Nikhil Agarwal <nagarwal@xilinx.com>
Signed-off-by: Pankaj Darak <pankajd@xilinx.com>
Signed-off-by: Thanneeru Srinivasulu <sthannee@xilinx.com>
Signed-off-by: tarakr <tarakr@xilinx.com>
Signed-off-by: Suryanarayana Raju Sangani <ssangani@xilinx.com>
---
 app/pktgen-cmds.c      | 15 +++++++++++----
 app/pktgen-constants.h |  3 ++-
 app/pktgen-main.c      | 24 +++++++++++++++++-------
 app/pktgen-port-cfg.c  | 12 ++++++++----
 app/pktgen-range.c     |  3 ++-
 app/pktgen.c           | 19 +++++++++++++++++--
 app/pktgen.h           |  4 +++-
 7 files changed, 60 insertions(+), 20 deletions(-)

diff --git a/app/pktgen-cmds.c b/app/pktgen-cmds.c
index 4da9bab..065fbe8 100644
--- a/app/pktgen-cmds.c
+++ b/app/pktgen-cmds.c
@@ -3125,18 +3125,22 @@ single_set_pkt_size(port_info_t *info, uint16_t size)
 {
 	pkt_seq_t * pkt = &info->seq_pkt[SINGLE_PKT];
 
+	uint16_t pktsize = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+				MAX_PKT_SIZE: (PG_ETHER_MAX_LEN - PG_ETHER_CRC_LEN);
+
 	if (size < PG_ETHER_CRC_LEN)
 		size = PG_ETHER_CRC_LEN;
 
 	if ( (size - PG_ETHER_CRC_LEN) < MIN_PKT_SIZE)
 		size = pktgen.eth_min_pkt;
-	if ( (size - PG_ETHER_CRC_LEN) > MAX_PKT_SIZE)
-		size = pktgen.eth_max_pkt;
+	if ( (size - PG_ETHER_CRC_LEN) > pktsize)
+		size = pktsize + PG_ETHER_CRC_LEN;
 
 	if ((pkt->ethType == PG_ETHER_TYPE_IPv6) && (size < (MIN_v6_PKT_SIZE + PG_ETHER_CRC_LEN)))
 		size = MIN_v6_PKT_SIZE + PG_ETHER_CRC_LEN;
 
 	pkt->pktSize = (size - PG_ETHER_CRC_LEN);
+	pkt->pktSize = size;
 
 	pktgen_packet_ctor(info, SINGLE_PKT, -1);
 	pktgen_packet_rate(info);
@@ -3924,6 +3928,9 @@ range_set_cos_id(port_info_t *info, char *what, uint8_t id)
 void
 range_set_pkt_size(port_info_t *info, char *what, uint16_t size)
 {
+	uint32_t pktsize = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+		MAX_9K_SIZE : PG_ETHER_MAX_LEN;
+
 	if (!strcmp(what, "inc") || !strcmp(what, "increment")) {
 		if (size > pktgen.eth_max_pkt)
 			size = pktgen.eth_max_pkt;
@@ -3931,8 +3938,8 @@ range_set_pkt_size(port_info_t *info, char *what, uint16_t size)
 	} else {
 		if (size < pktgen.eth_min_pkt)
 			size = MIN_PKT_SIZE;
-		else if (size > pktgen.eth_max_pkt)
-			size = MAX_PKT_SIZE;
+		else if (size > pktsize)
+			size = pktsize;
 		else
 			size -= PG_ETHER_CRC_LEN;
 
diff --git a/app/pktgen-constants.h b/app/pktgen-constants.h
index ede4e65..8694e18 100644
--- a/app/pktgen-constants.h
+++ b/app/pktgen-constants.h
@@ -17,7 +17,7 @@ extern "C" {
 enum {
 #ifndef RTE_LIBRTE_VMXNET3_PMD
 	DEFAULT_PKT_BURST       = 64,	/* Increasing this number consumes memory very fast */
-	DEFAULT_RX_DESC         = (DEFAULT_PKT_BURST * 8 * 2),
+	DEFAULT_RX_DESC         = (DEFAULT_PKT_BURST * 8 * 2 * 2),
 	DEFAULT_TX_DESC         = DEFAULT_RX_DESC * 2,
 #else
 	DEFAULT_PKT_BURST       = 32,	/* Increasing this number consumes memory very fast */
@@ -31,6 +31,7 @@ enum {
 
 	DEFAULT_PRIV_SIZE       = 0,
 
+	MBUF_9K_SIZE            = 9018 + RTE_PKTMBUF_HEADROOM + DEFAULT_PRIV_SIZE,
 	NUM_Q                   = 16,	/**< Number of cores per port. */
 };
 #define DEFAULT_MBUF_SIZE	(PG_ETHER_MAX_JUMBO_FRAME_LEN + RTE_PKTMBUF_HEADROOM) /* See: http://dpdk.org/dev/patchwork/patch/4479/ */
diff --git a/app/pktgen-main.c b/app/pktgen-main.c
index 96d1c0c..1ca2941 100644
--- a/app/pktgen-main.c
+++ b/app/pktgen-main.c
@@ -188,7 +188,7 @@ pktgen_parse_args(int argc, char **argv)
 	pktgen.mbuf_buf_size = RTE_MBUF_DEFAULT_BUF_SIZE;
 
 	pktgen.verbose = 0;
-	while ((opt = getopt_long(argc, argvopt, "p:m:f:l:s:g:hPNGTvjtr",
+	while ((opt = getopt_long(argc, argvopt, "p:m:f:l:s:g:hPNGTvjtr9",
 				  lgopts, &option_index)) != EOF)
 		switch (opt) {
 		case 't':
@@ -300,7 +300,12 @@ pktgen_parse_args(int argc, char **argv)
 
 		case 'h':	/* print out the help message */
 			pktgen_usage(prgname);
-			return -1;
+		return -1;
+
+		case '9': /* MTU 9K support */
+		pktgen_log_info("%s: case 9... \n", __func__);
+		pktgen.flags    |= MTU9K_SUPPORT_FLAG;
+		break;
 
 		case 0:	/* crc-strip for all ports */
 			printf(">>> Strip CRC in hardware is the default\n");
@@ -407,8 +412,10 @@ RTE_FINI(pktgen_fini)
 int
 main(int argc, char **argv)
 {
-	uint32_t i;
+	uint32_t nb_ports;
+	int32_t i;
 	int32_t ret;
+	struct rte_device *dev;
 
 	signal(SIGSEGV, sig_handler);
 	signal(SIGHUP, sig_handler);
@@ -563,10 +570,13 @@ main(int argc, char **argv)
 	/* Wait for all of the cores to stop running and exit. */
 	rte_eal_mp_wait_lcore();
 
-	RTE_ETH_FOREACH_DEV(i) {
-		rte_eth_dev_stop(i);
-		rte_delay_us_sleep(100 * 1000);
-		rte_eth_dev_close(i);
+	nb_ports = rte_eth_dev_count_avail();
+	for(i = nb_ports-1; i >= 0; i--) {
+		dev = rte_eth_devices[i].device;
+		if (rte_dev_remove(dev))
+			printf("Failed to detach port '%d'\n", i);
+		else
+			printf("successfully removed port '%d'\n", i);
 	}
 
 	cli_destroy();
diff --git a/app/pktgen-port-cfg.c b/app/pktgen-port-cfg.c
index a982d0d..7a27602 100644
--- a/app/pktgen-port-cfg.c
+++ b/app/pktgen-port-cfg.c
@@ -101,16 +101,19 @@ pktgen_mbuf_pool_create(const char *type, uint8_t pid, uint8_t queue_id,
 	struct rte_mempool *mp;
 	char name[RTE_MEMZONE_NAMESIZE];
 	uint64_t sz;
+	uint16_t mbuf_sz = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+					MBUF_9K_SIZE :DEFAULT_MBUF_SIZE;
+
 
 	snprintf(name, sizeof(name), "%-12s%u:%u", type, pid, queue_id);
 
-	sz = nb_mbufs * (DEFAULT_MBUF_SIZE + sizeof(struct rte_mbuf));
+	sz = nb_mbufs * (mbuf_sz + sizeof(struct rte_mbuf));
 	sz = RTE_ALIGN_CEIL(sz + sizeof(struct rte_mempool), 1024);
 
 	if (pktgen.verbose)
 		pktgen_log_info(
 			"    Create: %-*s - Memory used (MBUFs %5u x (size %u + Hdr %lu)) + %lu = %6lu KB, headroom %d",
-			16, name, nb_mbufs, DEFAULT_MBUF_SIZE,
+			16, name, nb_mbufs, mbuf_sz,
 			sizeof(struct rte_mbuf), sizeof(struct rte_mempool),
 			sz / 1024, RTE_PKTMBUF_HEADROOM);
 
@@ -119,7 +122,7 @@ pktgen_mbuf_pool_create(const char *type, uint8_t pid, uint8_t queue_id,
 
 	/* create the mbuf pool */
 	mp = rte_pktmbuf_pool_create(name, nb_mbufs, cache_size,
-		DEFAULT_PRIV_SIZE, DEFAULT_MBUF_SIZE, socket_id);
+		DEFAULT_PRIV_SIZE, mbuf_sz, socket_id);
 	if (mp == NULL)
 		pktgen_log_panic(
 			"Cannot create mbuf pool (%s) port %d, queue %d, nb_mbufs %d, socket_id %d: %s",
@@ -227,7 +230,8 @@ pktgen_config_ports(void)
 		pktgen_log_info(
 			">>>> Configuring %d ports, MBUF Size %d, MBUF Cache Size %d",
 			pktgen.nb_ports,
-			DEFAULT_MBUF_SIZE,
+			(pktgen.flags & MTU9K_SUPPORT_FLAG) ? MBUF_9K_SIZE :
+							DEFAULT_MBUF_SIZE,
 			MBUF_CACHE_SIZE);
 	}
 
diff --git a/app/pktgen-range.c b/app/pktgen-range.c
index f88258d..bbaaa6f 100644
--- a/app/pktgen-range.c
+++ b/app/pktgen-range.c
@@ -595,7 +595,8 @@ pktgen_range_setup(port_info_t *info)
 	range->pkt_size     = MIN_PKT_SIZE;
 	range->pkt_size_inc = 0;
 	range->pkt_size_min = MIN_PKT_SIZE;
-	range->pkt_size_max = MAX_PKT_SIZE;
+	range->pkt_size_max = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+				MAX_PKT_SIZE : (PG_ETHER_MAX_LEN - PG_ETHER_CRC_LEN);
 
 	range->vxlan_gid = info->seq_pkt[SINGLE_PKT].group_id;
 	range->vxlan_gid_inc = 0;
diff --git a/app/pktgen.c b/app/pktgen.c
index 26cc80d..1042a47 100644
--- a/app/pktgen.c
+++ b/app/pktgen.c
@@ -74,6 +74,7 @@ pktgen_wire_size(port_info_t *info)
 		} else
 			size = info->seq_pkt[SINGLE_PKT].pktSize + PKT_OVERHEAD_SIZE;
 	}
+	size -= (PKT_PREAMBLE_SIZE + INTER_FRAME_GAP + PG_ETHER_CRC_LEN);
 	return size;
 }
 
@@ -296,6 +297,7 @@ pktgen_send_burst(port_info_t *info, uint16_t qid)
 	struct qstats_s *qstats;
 	uint32_t ret, cnt, tap, rnd, tstamp, i;
 	int32_t seq_idx;
+	pkt_seq_t *pkt;
 
 	if ((cnt = mtab->len) == 0)
 		return;
@@ -310,6 +312,10 @@ pktgen_send_burst(port_info_t *info, uint16_t qid)
 	else
 		seq_idx = SINGLE_PKT;
 
+	pkt = &info->seq_pkt[seq_idx];
+	for (i = 0; i < cnt; i++)
+		rte_pktmbuf_pkt_len(pkts[i]) = pkt->pktSize;
+
 	tap = pktgen_tst_port_flags(info, PROCESS_TX_TAP_PKTS);
 	rnd = pktgen_tst_port_flags(info, SEND_RANDOM_PKTS);
 	tstamp = pktgen_tst_port_flags(info, (SEND_LATENCY_PKTS | SEND_RATE_PACKETS | SAMPLING_LATENCIES));
@@ -912,6 +918,10 @@ pktgen_setup_cb(struct rte_mempool *mp,
 	pkt_seq_t *pkt;
 	uint16_t qid, idx;
 
+	uint32_t pktsize = (pktgen.flags & MTU9K_SUPPORT_FLAG) ?
+				MAX_PKT_SIZE:
+				(PG_ETHER_MAX_LEN - PG_ETHER_CRC_LEN);
+
 	info = data->info;
 	qid = data->qid;
 
@@ -941,7 +951,7 @@ pktgen_setup_cb(struct rte_mempool *mp,
 	pktgen_packet_ctor(info, idx, -1);
 
 	rte_memcpy((uint8_t *)m->buf_addr + m->data_off,
-	           (uint8_t *)&pkt->hdr, MAX_PKT_SIZE);
+	           (uint8_t *)&pkt->hdr, pktsize);
 
 	m->pkt_len  = pkt->pktSize;
 	m->data_len = pkt->pktSize;
@@ -1150,7 +1160,7 @@ pktgen_main_receive(port_info_t *info, uint8_t lid,
 {
 	uint8_t pid;
 	uint16_t qid, nb_rx;
-	capture_t *capture;
+	__rte_unused    capture_t *capture;
 	struct qstats_s *qstats;
 	int i;
 
@@ -1169,6 +1179,10 @@ pktgen_main_receive(port_info_t *info, uint8_t lid,
 	for(i = 0; i < nb_rx; i++)
 		qstats->rxbytes += rte_pktmbuf_data_len(pkts_burst[i]);
 
+	info->sizes._64 += nb_rx;
+	rte_pktmbuf_free_bulk(pkts_burst, nb_rx);
+
+#if 0
 	pktgen_recv_tstamp(info, pkts_burst, nb_rx);
 
 	/* packets are not freed in the next call. */
@@ -1185,6 +1199,7 @@ pktgen_main_receive(port_info_t *info, uint8_t lid,
 	}
 
 	rte_pktmbuf_free_bulk(pkts_burst, nb_rx);
+#endif
 }
 
 static void
diff --git a/app/pktgen.h b/app/pktgen.h
index 66fa12e..20fb943 100644
--- a/app/pktgen.h
+++ b/app/pktgen.h
@@ -253,8 +253,9 @@ enum {
 	SOCKET0                 = 0	/**< Socket ID value for allocation */
 };
 
+#define MAX_9K_SIZE         9018
 #define MIN_PKT_SIZE		(pktgen.eth_min_pkt - PG_ETHER_CRC_LEN)
-#define MAX_PKT_SIZE        (pktgen.eth_max_pkt - PG_ETHER_CRC_LEN)
+#define MAX_PKT_SIZE        (MAX_9K_SIZE - PG_ETHER_CRC_LEN)
 
 typedef struct rte_mbuf rte_mbuf_t;
 
@@ -351,6 +352,7 @@ enum {						/* Pktgen flags bits */
 	BLINK_PORTS_FLAG        = (1 << 10),	/**< Blink the port leds */
 	ENABLE_THEME_FLAG       = (1 << 11),	/**< Enable theme or color support */
 
+	MTU9K_SUPPORT_FLAG      = (1 << 15),    /**< MTU 9K support */
 	CONFIG_PAGE_FLAG        = (1 << 16),	/**< Display the configure page */
 	SEQUENCE_PAGE_FLAG      = (1 << 17),	/**< Display the Packet sequence page */
 	RANGE_PAGE_FLAG         = (1 << 18),	/**< Display the range page */
-- 
2.17.1

